/*
 * Copyright the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ch.rasc.openai4j.threads;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;

import ch.rasc.openai4j.assistants.Tool;

@JsonInclude(Include.NON_EMPTY)
@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)
@SuppressWarnings({ "unused", "hiding" })
public class ThreadMessageRequest {
	private final String role;
	private final Object content;
	private final List<Attachment> attachments;
	private final Map<String, Object> metadata;

	private ThreadMessageRequest(Builder builder) {
		if (builder.content == null) {
			throw new IllegalArgumentException("content must not be null");
		}
		if (builder.role == null) {
			throw new IllegalArgumentException("role must not be null");
		}
		this.role = builder.role;
		this.content = builder.content;
		this.attachments = builder.attachments;
		this.metadata = builder.metadata;
	}

	public static Builder builder() {
		return new Builder();
	}

	public static final class Builder {
		private String role;
		private Object content;
		private List<Attachment> attachments;
		private Map<String, Object> metadata;

		private Builder() {
		}

		/**
		 * The role of the entity that is creating the message. Allowed values include:
		 * <p>
		 * user: Indicates the message is sent by an actual user and should be used in
		 * most cases to represent user-generated messages.
		 * <p>
		 * assistant: Indicates the message is generated by the assistant. Use this value
		 * to insert messages from the assistant into the conversation.
		 */
		public Builder role(String role) {
			this.role = role;
			return this;
		}

		/**
		 * Set the role of the entity that is creating the message to user
		 */
		public Builder userRole() {
			this.role = "user";
			return this;
		}

		/**
		 * Set the role of the entity that is creating the message to assistant
		 */
		public Builder assistantRole() {
			this.role = "assistant";
			return this;
		}

		/**
		 * The text contents of the message.
		 */
		public Builder content(String content) {
			this.content = content;
			return this;
		}

		/**
		 * An array of content parts with a defined type, each can be of type text or
		 * images can be passed with image_url or image_file. Image types are only
		 * supported on Vision-compatible models.
		 */
		public Builder content(List<MessageContent> content) {
			this.content = new ArrayList<>(content);
			return this;
		}

		/**
		 * An array of content parts with a defined type, each can be of type text or
		 * images can be passed with image_url or image_file. Image types are only
		 * supported on Vision-compatible models.
		 */
		@SuppressWarnings("unchecked")
		public Builder addContent(MessageContent... content) {
			if (this.content == null || !(this.content instanceof List)) {
				this.content = new ArrayList<>();
			}
			((List<MessageContent>) this.content).addAll(List.of(content));
			return this;
		}

		/**
		 * A list of files attached to the message, and the tools they should be added to.
		 */
		public Builder attachments(List<Attachment> attachments) {
			this.attachments = new ArrayList<>(attachments);
			return this;
		}

		/**
		 * A list of files attached to the message, and the tools they should be added to.
		 */
		public Builder addAttachments(Attachment... attachments) {
			if (this.attachments == null) {
				this.attachments = new ArrayList<>();
			}
			this.attachments.addAll(List.of(attachments));
			return this;
		}

		/**
		 * A file attached to the message, and the tools they should be added to.
		 */
		public Builder addAttachment(
				Function<Attachment.Builder, Attachment.Builder> fn) {
			return addAttachments(fn.apply(Attachment.builder()).build());
		}

		/**
		 * Set of 16 key-value pairs that can be attached to an object. This can be useful
		 * for storing additional information about the object in a structured format.
		 * Keys can be a maximum of 64 characters long and values can be a maxium of 512
		 * characters long.
		 */
		public Builder metadata(Map<String, Object> metadata) {
			this.metadata = new HashMap<>(metadata);
			return this;
		}

		/**
		 * Add a key-value pair to the metadata
		 */
		public Builder putMetadata(String key, Object value) {
			if (this.metadata == null) {
				this.metadata = new HashMap<>();
			}
			this.metadata.put(key, value);
			return this;
		}

		public ThreadMessageRequest build() {
			return new ThreadMessageRequest(this);
		}
	}

	@JsonInclude(Include.NON_EMPTY)
	@JsonAutoDetect(fieldVisibility = Visibility.ANY)
	public static class Attachment {
		@JsonProperty("file_id")
		private final String fileId;
		private final List<Tool> tools;

		private Attachment(Builder builder) {
			this.fileId = builder.fileId;
			this.tools = builder.tools;
		}

		public static Builder builder() {
			return new Builder();
		}

		public static final class Builder {
			private String fileId;
			private List<Tool> tools;

			private Builder() {
			}

			/**
			 * The ID of the file to attach to the message.
			 */
			public Builder fileId(String fileId) {
				this.fileId = fileId;
				return this;
			}

			/**
			 * The tools to add this file to.
			 */
			public Builder tools(List<Tool> tools) {
				this.tools = new ArrayList<>(tools);
				return this;
			}

			/**
			 * The tools to add this file to.
			 */
			public Builder addTools(Tool... tools) {
				if (this.tools == null) {
					this.tools = new ArrayList<>();
				}
				this.tools.addAll(List.of(tools));
				return this;
			}

			public Attachment build() {
				return new Attachment(this);
			}
		}
	}

}
